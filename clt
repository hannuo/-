mian.cpp

#include <stdio.h>
#include "rio.h"
#include "opensocket.h"

int main(int argc, char *argv[])
{

    int clientfd;
    char *host,*port,buf[1024];
    rio_t rio;
    if(argc != 3)
    {
        fprintf(stderr,"usage: %s <host> <port>\n",argv[0]);
        exit(0);
    }

    host = argv[1];
    port = argv[2];

    clientfd = open_clientfd(host,port);
    rio_readinitb(&rio,clientfd);
    while(fgets(buf,1024,stdin) != NULL)
    {
        rio_writen(clientfd,buf,strlen(buf));
        //rio_readlineb(&rio,buf,1024);
        rio_read(&rio,buf,1024);
        fputs(buf,stdout);
    }
    close(clientfd);

    return 0;
}


rio.h rio.cpp
#ifndef RIO_H
#define RIO_H

#include "csapp.h"

#define RIO_BUFSIZE 8192

typedef struct {
    int rio_fd;                 /*Descriptor for this internal buf */
    int rio_cnt;                /*Unread bytes in internal buf */
    char *rio_bufptr;           /*Next unread byte in internal buf */
    char rio_buf[RIO_BUFSIZE];  /*Internal buffer */
} rio_t;

ssize_t rio_readn(int fd, void *usrbuf, size_t n);
ssize_t rio_writen(int fd, void *usrbuf, size_t n);

void rio_readinitb(rio_t *rp,int fd);

ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n);
ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen);
ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n);



#endif // RIO_H


#include "csapp.h"
#include "rio.h"

ssize_t rio_readn(int fd, void *usrbuf, size_t n)
{
    size_t nleft = n;
    ssize_t nread;
    char *bufp = (char*)usrbuf;

    while(nleft > 0)
    {
        if((nread = read(fd,bufp,nleft)) < 0)
        {
            if(errno == EINTR)
                nread = 0;
            else
                return -1;
        }
        else if(nread == 0)
            break;
        nleft -= nread;
        bufp += nread;

    }

    return (n-nleft);
}

ssize_t rio_writen(int fd, void *usrbuf, size_t n)
{
    size_t nleft = n;
    ssize_t nwritten;
    char *bufp = (char*)usrbuf;

    while(nleft > 0)
    {
        if((nwritten = write(fd, bufp, nleft))<= 0)
        {
            if(errno == EINTR)
                nwritten = 0;
            else
                return -1;
        }

        nleft -= nwritten;
        bufp += nwritten;
    }

    return 0;
}

void rio_readinitb(rio_t *rp, int fd)
{
    rp->rio_fd = fd;
    rp->rio_cnt = 0;
    rp->rio_bufptr = rp->rio_buf;
}

ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)
{
    int cnt;

    while(rp->rio_cnt <= 0)
    {
        rp->rio_cnt = read(rp->rio_fd,rp->rio_buf,sizeof(rp->rio_buf));
        if(rp->rio_cnt < 0)
        {
            if(errno!= EINTR)
                return -1;
        }
        else if(rp->rio_cnt == 0)
            return 0;
        else
            rp->rio_bufptr = rp->rio_buf;
    }

    cnt = n;
    if(rp->rio_cnt < n)
        cnt = rp->rio_cnt;

    memcpy(usrbuf,rp->rio_bufptr,cnt);
    rp->rio_cnt -= cnt;
    rp->rio_bufptr += cnt;

    return cnt;

}

ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen)
{
    int n,rc;
    char c,*bufp = (char*)usrbuf;

    for(n = 1; n < maxlen; n++)
    {
        if((rc = rio_read(rp,&c,1)) == 1)
        {
            *bufp++ = c;
            if (c == '\n'){
                n++;
                break;
            }
        }
        else if(rc == 0)
        {
            if (n == 1)
                return 0;
            else
                break;
        }
        else
            return -1;
    }
    *bufp = 0;
    return n - 1;
}

ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n)
{
    size_t nleft = n;
    ssize_t nread;
    char *bufp = (char*)usrbuf;

    while(nleft > 0)
    {
        if ((nread = rio_read(rp,bufp,nleft)) < 0)
            return -1;
        else if (nread == 0)
            break;
        nleft -= nread;
        bufp += nread;
    }

    return (n-nleft);
} 

opensocket.h opensocket.cpp
#ifndef OPENSOCKET_H
#define OPENSOCKET_H
#include "csapp.h"
#include <sys/socket.h>
#include <netdb.h>

int show_hostaddr(char* hostname);

int open_clientfd(char *hostname, char *port);

int open_listenfd(char *port);

#endif // OPENSOCKET_H

#include "opensocket.h"

int show_hostaddr(char* hostname)
{
    struct addrinfo *p, *listp,hints;
    char buf[1024];
    int rc,flags;



    memset((void*)&hints,0,sizeof(struct addrinfo));
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    if((rc = getaddrinfo(hostname,NULL,&hints,&listp))!=0)
    {
        fprintf(stderr,"getaddrinfo error:%s\n",gai_strerror(rc));
        return 1;
    }

    flags = NI_NUMERICHOST;
    for(p = listp;p;p = p->ai_next)
    {
        getnameinfo(p->ai_addr,p->ai_addrlen,buf,1024,NULL,0,flags);
        printf("%s\n",buf);
    }

    freeaddrinfo(listp);
    return 0;
}

int open_clientfd(char *hostname, char *port)
{
    int clientfd;
    struct addrinfo hints,*listp,*p;
    memset((void*)&hints,0,sizeof(struct addrinfo));
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_NUMERICSERV;
    hints.ai_flags |= AI_ADDRCONFIG;

    getaddrinfo(hostname,port,&hints,&listp);

    for(p = listp;p;p=p->ai_next)
    {
        if((clientfd = socket(p->ai_family,p->ai_socktype,p->ai_protocol)) < 0)
            continue;

        if(connect(clientfd,p->ai_addr,p->ai_addrlen)!= -1)
            break;
        close(clientfd);
    }

    freeaddrinfo(listp);
    if(!p)
        return -1;
    else
        return clientfd;

}

int open_listenfd(char *port)
{
    struct addrinfo hints,*listp,*p;
    int listenfd,optval = 1;

    memset((void*)&hints,0,sizeof(struct addrinfo));

    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG;
    hints.ai_flags |= AI_NUMERICSERV;
    getaddrinfo(NULL,port,&hints,&listp);

    for(p = listp;p;p=p->ai_next)
    {
        if((listenfd = socket(p->ai_family,p->ai_socktype,p->ai_protocol)) < 0)
            continue;

        setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,(const void *)&optval,sizeof(int));

        if(bind(listenfd,p->ai_addr,p->ai_addrlen) == 0)
            break;
        close(listenfd);
    }

    freeaddrinfo(listp);

    if(!p)
        return -1;

    if(listen(listenfd,1024) < 0){
        close(listenfd);
        return -1;
    }
    return listenfd;

}

csapp.h
#ifndef CSAPP_H
#define CSAPP_H

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#endif // CSAPP_H

          
